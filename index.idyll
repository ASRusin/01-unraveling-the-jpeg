[meta title:"Unraveling The JPEG" description:"Short description of your project" /]

[Nav fullWidth:true /]

[Header
  title:"Unraveling The JPEG"
  fullWidth:true /]

[Metadata
  fullWidth:true
  authors:`[{
    name: "Omar Shehata",
    role: 'Words, Graphics'
  }, {
    name: "Matthew Conlen",
    role: 'Editor'
  }]`
  doi:""
  archive:""
  source:""
/]

If you've ever used the internet, you've probably seen a JPEG image. JPEG is a standard for image compression that's brought us a world where colorful, high quality images are easily shared. From web pages, to email, to social media and smartphones, it's used billions of times per day across all of our devices every time we view or send images online. Without JPEG, the web would be a little less colorful, a lot slower, and possibly host a lot less cat pictures.

Despite its ubiquity in our lives, JPEG is often treated as a black box. You might be aware that it's a **lossy** compression technique; it throws away data that we're not likely to notice to reduce file size, but what does that data look like? How does it decide what we will or won't notice? And is that assumption correct all the time? (Spoiler: it's not!)

There's even more mysteries that arise when we look at how JPEG images are stored. If you open a JPEG image in a text editor, you'll see the raw bytes; the list of numbers that represent this image on your computer. Below is an image and its raw bytes.

// I want to communicate to the reader that everything we're doing here, they can do by editing the JPEG themselves, saving it, and opening it. That I'm teaching them here isn't some kind of simplified version, it's really the JPEG itself. But I'm not sure if that explanation is appropriate to put in the intro?

Try changing the first 17 to a 1 or 16. Or try changing the first 232 to 252.

[var name:"header" value:`[]` /]
[var name:"body" value:`[]` /]
[TextArea value:body rows:12 cols:70 /]
[ImageFetch src:"static/images/tanzania.jpg" header:header body:body /]
[ImageCanvas header:header body:body  /]

Changing this single number somehow alters the entire image, and quite spectacularly so! It's not too surprising that changing these numbers will change the colors in the image, but certain numbers seem to change, not the color...but the shape? To see what I mean, try changing the second 69 to 251 or greater and look at the top left corner of the image. These specific patterns are always hiding in there, no matter what JPEG image you use.

This article will explore how JPEG works by reverse engineering it. You'll get to unravel each of these mysteries by changing the raw bytes and observing what they do to the image. I think it's valuable not just because it's important to understand the technology we use everyday, but learning about JPEG is also learning about visual perception, what details matter most to our eyes, as well as information theory, and a little bit of linear algebra.

/// Saying information theory and linear algebra gets me excited...would it turn off the casual reader? I started with "visual perception" for this reason, I assume it sounds less daunting/more exciting?
// I don't want to make this intro too long, because I know it's more exciting to jump in, but there are a lot of reasons why it's cool to learn this that'll get revealed in the article, such as:
// 1- Compression & encryption are both intimately related in information theory. So it's not just learning how to reduce the size of images, but also how to encrypt and hide secrets.
// 2- For example, you could make a JPEG image a secret by taking out the quantization table frmo the header. No one else will be able to open it except for you and whoever you give the "key" to.
// 3- There are some real, practical applications of this. Facebook strips the JPEG header to make their images fit in under 200 bytes.
